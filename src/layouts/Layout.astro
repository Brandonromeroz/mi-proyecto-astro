---
import "@fontsource-variable/onest";

import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
  title: string;
  description: string;
}

const { description, title } = Astro.props;
---

<!doctype html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ViewTransitions />
  </head>

  <body class="relative bg-white dark:bg-[#0a0a0d] text-gray-900 dark:text-gray-100 overflow-x-hidden">
    <!-- Efecto de part√≠culas interactivas -->
    <canvas id="particles-canvas" class="fixed inset-0 -z-10 w-full h-full opacity-20 dark:opacity-10 pointer-events-none"></canvas>

    <Header />
    
    <main class="flex-1 px-5 md:px-8 lg:px-12 transition-all duration-500">
      <div class="max-w-5xl mx-auto py-12 md:py-20">
        <slot />
      </div>
    </main>

    <Footer />

    <!-- Bot√≥n de tema flotante -->
    <button
      id="theme-toggle"
      class="fixed bottom-8 right-8 p-3 rounded-full bg-white/90 dark:bg-gray-900/90 shadow-xl border border-gray-200 dark:border-gray-700 hover:scale-110 transition-all duration-300 group backdrop-blur-md"
      aria-label="Toggle theme"
    >
      <span class="dark:hidden text-lg">üåô</span>
      <span class="hidden dark:inline text-lg">‚òÄÔ∏è</span>
      <span class="absolute inset-0 rounded-full border-2 border-transparent group-hover:border-[#3a86ff]/30 dark:group-hover:border-[#00d1b2]/30 transition-all duration-300"></span>
    </button>

    <style is:global>
      :root {
        color-scheme: light dark;
        --primary: #3a86ff;
        --primary-hover: #2667cc;
        --secondary: #ff3860;
        --accent: #00d1b2;
        --bg-light: #ffffff;
        --bg-dark: #0a0a0d;
      }

      html {
        font-family: "Onest Variable", system-ui, sans-serif;
        scroll-behavior: smooth;
      }

      body {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overscroll-behavior: none;
        line-height: 1.7;
        transition: background-color 0.5s ease, color 0.5s ease;
      }

      /* Animaci√≥n de entrada */
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      main > * {
        animation: fadeIn 0.8s ease-out forwards;
      }

      /* Efecto de tarjeta */
      .card {
        background: rgba(255, 255, 255, 0.85);
        backdrop-filter: blur(12px);
        border: 1px solid rgba(0, 0, 0, 0.08);
        transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
      }

      .dark .card {
        background: rgba(20, 20, 25, 0.85);
        border: 1px solid rgba(255, 255, 255, 0.08);
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 30px -10px rgba(58, 134, 255, 0.15);
      }

      /* Efecto de enlace */
      a:not(.no-underline) {
        position: relative;
        color: var(--primary);
      }

      a:not(.no-underline)::after {
        content: '';
        position: absolute;
        width: 0;
        height: 2px;
        bottom: -2px;
        left: 0;
        background: linear-gradient(90deg, var(--primary), var(--accent));
        transition: width 0.3s ease;
      }

      a:not(.no-underline):hover::after {
        width: 100%;
      }

      /* Header */
      #header-nav {
        backdrop-filter: blur(12px);
        background: rgba(255, 255, 255, 0.9) !important;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
      }

      .dark #header-nav {
        background: rgba(10, 10, 15, 0.9) !important;
        border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      }

      #header-nav.scrolled {
        box-shadow: 0 5px 30px rgba(0, 0, 0, 0.1);
      }

      /* Scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }

      ::-webkit-scrollbar-track {
        background: #f1f1f1;
      }

      .dark ::-webkit-scrollbar-track {
        background: #1a1a1f;
      }

      ::-webkit-scrollbar-thumb {
        background: #3a86ff;
        border-radius: 4px;
      }

      .dark ::-webkit-scrollbar-thumb {
        background: #00d1b2;
      }

      /* Efecto de texto destacado */
      .highlight {
        background: linear-gradient(90deg, var(--primary), var(--accent));
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
      }
    </style>

    <script is:inline>
      // Sistema de tema autom√°tico
      const themeToggle = document.getElementById('theme-toggle');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // Verificar preferencia guardada o del sistema
      if (localStorage.getItem('theme') === 'dark' || (!localStorage.getItem('theme') && prefersDark)) {
        document.documentElement.classList.add('dark');
      }

      themeToggle.addEventListener('click', () => {
        const isDark = document.documentElement.classList.toggle('dark');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        
        // Actualizar part√≠culas al cambiar tema
        updateParticles();
        
        // Efecto de confeti
        const confetti = document.createElement('div');
        confetti.className = 'fixed inset-0 pointer-events-none z-50';
        confetti.innerHTML = `
          <div class="absolute top-1/2 left-1/2 w-4 h-4 rounded-full bg-${isDark ? '[#00d1b2]' : '[#3a86ff]'} animate-confetti"></div>
        `;
        document.body.appendChild(confetti);
        setTimeout(() => confetti.remove(), 1000);
      });

      // Efecto de part√≠culas
      let particles = [];
      let canvas, ctx;

      function initParticles() {
        canvas = document.getElementById('particles-canvas');
        if (!canvas) return;
        
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        ctx = canvas.getContext('2d');
        
        const particleCount = window.innerWidth < 768 ? 30 : 80;
        
        for (let i = 0; i < particleCount; i++) {
          particles.push({
            x: Math.random() * canvas.width,
            y: Math.random() * canvas.height,
            size: Math.random() * 3 + 1,
            speedX: Math.random() * 1 - 0.5,
            speedY: Math.random() * 1 - 0.5,
            color: document.documentElement.classList.contains('dark') 
              ? 'rgba(255,255,255,0.5)' 
              : 'rgba(0,0,0,0.3)'
          });
        }
        
        animateParticles();
      }

      function updateParticles() {
        const newColor = document.documentElement.classList.contains('dark') 
          ? 'rgba(255,255,255,0.5)' 
          : 'rgba(0,0,0,0.3)';
        
        particles.forEach(p => {
          p.color = newColor;
        });
      }

      function animateParticles() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        particles.forEach(particle => {
          ctx.fillStyle = particle.color;
          ctx.beginPath();
          ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
          ctx.fill();
          
          particle.x += particle.speedX;
          particle.y += particle.speedY;
          
          if (particle.x > canvas.width || particle.x < 0) particle.speedX *= -1;
          if (particle.y > canvas.height || particle.y < 0) particle.speedY *= -1;
        });
        
        requestAnimationFrame(animateParticles);
      }

      // Inicializaci√≥n
      document.addEventListener('DOMContentLoaded', () => {
        initParticles();
        
        // Efecto de scroll para header
        window.addEventListener('scroll', () => {
          const header = document.querySelector('#header-nav');
          header.classList.toggle('scrolled', window.scrollY > 50);
        }, { passive: true });

        // Redimensionar part√≠culas al cambiar tama√±o de ventana
        window.addEventListener('resize', () => {
          canvas.width = window.innerWidth;
          canvas.height = window.innerHeight;
        });
      });
    </script>
  </body>
</html>